Parser todos:
- fix casts
- casts and () in lvalues
* switch statements
x n-ary ops?
x static vars in methods?
* multiple static/instance init blocks?
- handling implicit parameter of instance methods - did I do this?
x foreach?
- 'native' indicator
- pragmas?


(1) * Resolve Klass placeholders
(2) * Traverse class hierarchy; check for loops, create and link class-level symbol tables
(3) * Populate class level symbol tables
	  - do all functions first, so that initializers for variables may refer to them
(4) * Traverse trees for fundecs, creating, linking, and filling symbol tables.
		- function resolution (requires type checking)
(5) * Type checking


Things to do in/before semantics:

- establish structure for builtin classes & methods
	- java standard library stuff, like String (which is special), Math, perhaps some others
	- Arduino stuff: Serial class, various methods (pinMode, etc.)
	
* build symbol tables
* resolve class placeholders to point to Klass objects
* deduce types of expressions
* name resolution (incl. overloading)
	> instance method calls point to declared type; may be overridden.
* resolve class name vs. variable identifier (Foo.bar(), is Foo a class name or a variable? variable names take precedence)
* verify assignments, returns, operator arguments, and function call parameters have correct types; insert implicit conversions
* verify types of aggregate elements, and that aggregate rank matches declaration
- check that all paths in a non-void function terminated in a return statement
* create parent pointers
* identify block for break and continue
* check that all abstract methods are implemented in subclasses
* check that final methods are not overridden
* check that final classes are not extended
- check that final variables are not assigned to more than once
	- including things like initialization blocks, constructors, initalization in declaration
* check access restrictions
* check for declarations of 'this' and 'super'
- check for presence of no more than one loop() or setup(), and at least one of either.
- check for overloaded ISRs / funcs with ISR name that aren't thunks / aren't static
* check for loops in class hierarchy
- check for use of uninitialized variables
- check for static and abstract at same time

- check no aggregate assignment not in an initializer

* constructors calling other constructors with this() and super()
* using super.foo() to access superclass methods

Bugs:
- isStaticContext is implemented crappily. it works though


Optimization:

- determine whether any subclasses override each method (easy for final methods, final classes)
- construct call graph, determine leaf routines
- attempt to discover pure functions
- 


